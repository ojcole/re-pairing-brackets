// MIT License

// Copyright (c) 2020-2021 Oliver Cole

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#ifndef PROJECT_HELPERS_PARALLEL_COMPUTE_PARALLEL_H_
#define PROJECT_HELPERS_PARALLEL_COMPUTE_PARALLEL_H_

#include <cassert>
#include <memory>
#include <thread>
#include <vector>

namespace helper {
namespace parallel {

// This is a generic function for running many distinct things in parallel
// before combining the results. Each thread spawned will be given a config
// which is generated by the index passed to the config generator. The threads
// will then run until completion with the result being passed to the workers as
// a pointer. Once all of the threads have completed their operation, the
// combiner will be used to reduce the results to a single Result that can be
// returned.
//
// Result is the result returned by the runner and the worker
//
// Config is the information passed to each of the workers
//
// Worker has the type:
// void Worker(Config, shared_ptr<Result>, int worker_total, int worker_index);
//
// ConfigGen has the type:
// Config ConfigGen(int worker_index);
//
// Combiner has the type:
// Result Combiner(Result accumulator, Result next);
//
// The types Result and Config must be passed manually, but Worker, ConfigGen
// and Combiner can be inferred

template <typename Result, typename Config, typename Worker, typename ConfigGen,
          typename Combiner>
Result GenericParallelRunner(Worker worker, ConfigGen generator,
                             Combiner reducer, int workers) {
  assert(workers > 0);

  // Record the results, threads, and configs before generating the configs
  std::vector<std::shared_ptr<Result>> results;
  std::vector<std::thread> threads;
  std::vector<std::shared_ptr<Config>> configs;

  for (int i{}; i < workers; i++) {
    auto config = generator(i);
    configs.push_back(std::make_shared<Config>(config));
  }

  // Spawn the threads and pass the results and save them
  for (int i{}; i < workers; i++) {
    auto result = std::make_shared<Result>();
    results.push_back(result);

    std::thread thread(worker, configs[i], result, workers, i);
    threads.push_back(std::move(thread));
  }

  // Return all of the jobs and compile the results
  threads[0].join();
  auto final_result = *results[0];

  for (int i{1}; i < workers; i++) {
    threads[i].join();
    final_result = reducer(final_result, *results[i]);
  }

  return final_result;
}

}  // namespace parallel
}  // namespace helper

#endif
