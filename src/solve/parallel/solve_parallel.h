// MIT License

// Copyright (c) 2020-2021 Oliver Cole

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#ifndef PROJECT_SOLVE_PARALLEL_SOLVE_PARALLEL_H_
#define PROJECT_SOLVE_PARALLEL_SOLVE_PARALLEL_H_

#include "generate/generate_next.h"
#include "parallel_worker.h"
#include "result.h"
#include "solve/solution.h"

namespace solve {
namespace parallel {

// SolveLazy counts the number of width 1 and 2 that are found and saves words
// of all other widths. This is exhaustively done over all words of a particular
// length using workers number of threads
Result SolveLazy(int length, int workers);
// SolveLazy counts the number of width 1 and 2 that are found and saves words
// of all other widths. This is exhaustively done over all words of a particular
// length using 1 thread
Result SolveLazy(int length);
// SolveLazy counts the number of width 1 and 2 that are found by generating all
// words from the generator and saves words of all other widths using 1 thread
Result SolveLazy(generate::Generator generator);
// SolveLazy counts the number of width 1 and 2 that are found by generating all
// words from the generator and saves words of all other widths using workers
// number of threads
Result SolveLazy(generate::Generator generator, int workers);

// SolveMinimal counts the number of Hard width 1 and 2 that are found and saves
// Hard words of all other widths. This is exhaustively done over all Hard words
// of a particular length using workers number of threads
Result SolveMinimal(int length, int workers);
// SolveMinimal counts the number of width 1 and 2 Hard words that are found and
// saves Hards words of all other widths. This is exhaustively done over all
// Hard words of a particular length using 1 thread
Result SolveMinimal(int length);
// SolveMinimal counts the number of width 1 and 2 Hard words that are found by
// generating all Hard words from the generator and saves Hard words of all
// other widths using 1 thread
Result SolveMinimal(generate::Generator generator);
// SolveMinimal counts the number of width 1 and 2 Hard words that are found by
// generating all Hard words from the generator and saves Hard words of all
// other widths using workers number of threads
Result SolveMinimal(generate::Generator generator, int workers);

// SolveCollect finds optimal re-pairings for all words. This is exhaustively
// done over all words of a particular length using workers number of threads
Solutions SolveCollect(int length, int workers);
// SolveCollect finds optimal re-pairings for all words. This is exhaustively
// done over all words of a particular length using 1 thread
Solutions SolveCollect(int length);
// SolveCollect finds optimal re-pairings for all words. This is exhaustively
// done over all words generated by the generator using 1 thread
Solutions SolveCollect(generate::Generator generator);
// SolveCollect finds optimal re-pairings for all words. This is exhaustively
// done over all words generated by the generator using workers number of
// threads
Solutions SolveCollect(generate::Generator generator, int workers);

// SolveGeneral exhaustively applies the ParallelWorker over all words of a
// particular length using workers number of threads, combining result objects
Result SolveGeneral(int length, int workers, Worker ParallelWorker);
// SolveGeneral exhaustively applies the ParallelWorker over all words of a
// particular length using 1 thread, combining result objects
Result SolveGeneral(int length, Worker ParallelWorker);
// SolveGeneral exhaustively applies the ParallelWorker over all words generated
// by the generator using 1 thread, combining result objects
Result SolveGeneral(generate::Generator generator, Worker ParallelWorker);
// SolveGeneral exhaustively applies the ParallelWorker over all words generated
// by the generator using workers number of threads, combining result objects
Result SolveGeneral(generate::Generator generator, int workers,
                    Worker ParallelWorker);

}  // namespace parallel
}  // namespace solve

#endif
