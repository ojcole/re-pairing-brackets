#include <benchmark/benchmark.h>

#include "generate/generate_next.h"
#include "generate/generate_random.h"
#include "solve/derived/derived_strategy.h"

static void BM_SolveDerivedRandom100(benchmark::State &state) {
  std::string word{
      "()((()()(((())(())()()()(()(()()(()))((((((()(())(((((()(()))))())(()())"
      "()))())()())(())(((()))()))())))(()))()(()(())((((((()()()()())(((()())("
      ")))(()((()(())(())())()))(())))())())())(()))(())))(()))"};
  for (auto _ : state) {
    solve::derived::MultiComponentStrategy(word);
  }
}

static void BM_SolveDerivedRandom200(benchmark::State &state) {
  std::string word{
      "()(((()()()((((()())()((((())(())(())(((()(()(()()))())())())((((()(()(("
      ")(()))(())()()))()()()()())((())))(((()()))))()(()((()()(())(())(((((()("
      "())())(((())()(()))()))((()))((()()()()((((()()))))))())))(())((((()))(("
      "(()())()))(())))())((((())))()))))((()(())((())))()()(()())(())(()))(())"
      "()(((())(()((()(()()(())()())()(()))(())()()))()(())))(())(()(()((()(()("
      ")()))))))())()())()))(())((()())))())())"};
  for (auto _ : state) {
    solve::derived::MultiComponentStrategy(word);
  }
}

static void BM_SolveDerivedRandom400(benchmark::State &state) {
  std::string word{
      "((((((((()()()(()((()()))()())())))((((()(((())((()(((((()()))))()(((()("
      ")((()()(()()()())()()))(((((((((()(((((((())))))()((((((((()))()(()()))("
      "()))(()((())())()))))((((()())))))(()(())()))()())()(())(())()())))()()("
      "()(())))((()()(())((())((()))()())))()()((((((())))(()()(()(()(()((()()("
      "()(((((()))(((((((()()(()(()))(()())(()())(()))))))((())(()))())))())())"
      "())()))))()((()())))()))((()(())())())()))))((()(())()())))()()))(()())("
      ")()()))((()()()))(()()))))(()(())())(()((())))()()((((()()(()()())()((()"
      ")())))(()())())())((())())())))())()(())))()))(())()()()())()()(()()((()"
      ")(())(()(((((()((()))(((()))((()))(((())())()((((()))())))(()))((())(()("
      ")()()))()))(()(())()))((()(()()()))()(()()))))((())(()(((())())(((())()("
      "))()(()())(()())()))))()))()((())()))()()()()(()))((())()((()))()()(())("
      "()))()))"};
  for (auto _ : state) {
    solve::derived::MultiComponentStrategy(word);
  }
}

BENCHMARK(BM_SolveDerivedRandom100)->Unit(benchmark::kMillisecond);
BENCHMARK(BM_SolveDerivedRandom200)->Unit(benchmark::kMillisecond);
BENCHMARK(BM_SolveDerivedRandom400)->Unit(benchmark::kMillisecond);

BENCHMARK_MAIN();
